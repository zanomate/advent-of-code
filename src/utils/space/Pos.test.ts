import { p, Pos } from './Pos'
import { DiagDir, Dir } from './Dir'

const expectXY = (pos: Pos, x: number, y: number) => {
  expect(pos.x).toEqual(x)
  expect(pos.y).toEqual(y)
}

describe('Pos', () => {
  it('constructor', () => {
    const pos = p(123, 456)
    expectXY(pos, 123, 456)
  })

  it('equals', () => {
    const pos1 = p(123, 456)
    const pos2 = p(123, 456)
    const pos3 = p(456, 123)
    const pos4 = p(999, 999)
    expect(pos1.equals(pos2)).toBe(true)
    expect(pos1.equals(pos3)).toBe(false)
    expect(pos1.equals(pos4)).toBe(false)
  })

  it('isPositive', () => {
    const pos1 = p(123, 456)
    const pos2 = p(-123, 456)
    const pos3 = p(123, -456)
    const pos4 = p(-123, -456)
    expect(pos1.isPositive).toBe(true)
    expect(pos2.isPositive).toBe(false)
    expect(pos3.isPositive).toBe(false)
    expect(pos4.isPositive).toBe(false)
  })

  it('sum', () => {
    const pos = p(1, 1)
    const pos1 = p(2, 4)
    const pos2 = p(8, -5)
    const pos3 = p(-1, -1)
    const sum1 = pos.sum(pos1)
    expectXY(sum1, 3, 5)
    const sum2 = pos.sum(pos2)
    expectXY(sum2, 9, -4)
    const sum3 = pos.sum(pos3)
    expectXY(sum3, 0, 0)
  })

  it('diff', () => {
    const pos = p(5, 5)
    const pos1 = p(2, 4)
    const pos2 = p(8, -5)
    const diff1 = pos.diff(pos1)
    expectXY(diff1, 3, 1)
    const diff2 = pos.diff(pos2)
    expectXY(diff2, -3, 10)
    const diffSelf = pos.diff(pos)
    expectXY(diffSelf, 0, 0)
  })

  it('isInBound', () => {
    const pos = p(5, 5)
    expect(() => pos.isInBounds(10, 10, 5, 5)).toThrow('invalid bound')
    expect(() => pos.isInBounds(5, 5, 5, 5)).toThrow('invalid bound')
    expect(pos.isInBounds(0, 0, 10, 10)).toBe(true)
    expect(pos.isInBounds(5, 5, 10, 10)).toBe(true)
    expect(pos.isInBounds(-10, -10, 10, 10)).toBe(true)
    expect(pos.isInBounds(0, 0, 5, 5)).toBe(false)
    expect(pos.isInBounds(10, 10, 15, 15)).toBe(false)
    expect(pos.isInBounds(0, 0, 2, 2)).toBe(false)
    expect(pos.isInBounds(-10, -10, 0, 0)).toBe(false)
  })

  it('shift', () => {
    const pos = p(5, 5)
    expectXY(pos.shift(Dir.RIGHT), 6, 5)
    expectXY(pos.shift(Dir.LEFT), 4, 5)
    expectXY(pos.shift(Dir.DOWN), 5, 6)
    expectXY(pos.shift(Dir.UP), 5, 4)
    expectXY(pos.shift(Dir.RIGHT, 3), 8, 5)
    expectXY(pos.shift(Dir.LEFT, 3), 2, 5)
    expectXY(pos.shift(Dir.DOWN, 3), 5, 8)
    expectXY(pos.shift(Dir.UP, 3), 5, 2)
    expectXY(pos.shift(DiagDir.DOWN_RIGHT), 6, 6)
    expectXY(pos.shift(DiagDir.DOWN_LEFT), 4, 6)
    expectXY(pos.shift(DiagDir.UP_RIGHT), 6, 4)
    expectXY(pos.shift(DiagDir.UP_LEFT), 4, 4)
    expectXY(pos.shift(DiagDir.DOWN_RIGHT, 3), 8, 8)
    expectXY(pos.shift(DiagDir.DOWN_LEFT, 3), 2, 8)
    expectXY(pos.shift(DiagDir.UP_RIGHT, 3), 8, 2)
    expectXY(pos.shift(DiagDir.UP_LEFT, 3), 2, 2)
  })

  it('stepsToShift', () => {
    const pos = p(5, 5)
    const stepsRight = pos.stepsToShift(Dir.RIGHT, 3)
    expect(stepsRight.length).toBe(3)
    expectXY(stepsRight[0], 6, 5)
    expectXY(stepsRight[1], 7, 5)
    expectXY(stepsRight[2], 8, 5)
    const stepsUp = pos.stepsToShift(Dir.UP, 6)
    expect(stepsUp.length).toBe(6)
    expectXY(stepsUp[0], 5, 4)
    expectXY(stepsUp[1], 5, 3)
    expectXY(stepsUp[2], 5, 2)
    expectXY(stepsUp[3], 5, 1)
    expectXY(stepsUp[4], 5, 0)
    expectXY(stepsUp[5], 5, -1)
  })

  it('manhattanDistance', () => {
    const pos = p(1, 1)
    const pos1 = p(2, 4)
    const pos2 = p(8, -5)
    const pos3 = p(-1, -1)
    expect(pos.manhattanDistance(pos1)).toEqual(4)
    expect(pos.manhattanDistance(pos2)).toEqual(13)
    expect(pos.manhattanDistance(pos3)).toEqual(4)
  })

  it('neighbours', () => {
    const pos = p(1, 1)
    const n1 = pos.neighbours()
    expect(n1.length).toEqual(4)
    expectXY(n1[0], 1, 0)
    expectXY(n1[1], 2, 1)
    expectXY(n1[2], 1, 2)
    expectXY(n1[3], 0, 1)
    const n2 = pos.neighbours('+', 3)
    expect(n2.length).toEqual(4)
    expectXY(n2[0], 1, -2)
    expectXY(n2[1], 4, 1)
    expectXY(n2[2], 1, 4)
    expectXY(n2[3], -2, 1)
    const n3 = pos.neighbours('x')
    expect(n3.length).toEqual(4)
    expectXY(n3[0], 2, 0)
    expectXY(n3[1], 2, 2)
    expectXY(n3[2], 0, 2)
    expectXY(n3[3], 0, 0)
    const n4 = pos.neighbours('x', 3)
    expect(n4.length).toEqual(4)
    expectXY(n4[0], 4, -2)
    expectXY(n4[1], 4, 4)
    expectXY(n4[2], -2, 4)
    expectXY(n4[3], -2, -2)
    const n5 = pos.neighbours('8')
    expect(n5.length).toEqual(8)
    expectXY(n5[0], 1, 0)
    expectXY(n5[1], 2, 0)
    expectXY(n5[2], 2, 1)
    expectXY(n5[3], 2, 2)
    expectXY(n5[4], 1, 2)
    expectXY(n5[5], 0, 2)
    expectXY(n5[6], 0, 1)
    expectXY(n5[7], 0, 0)
    const n6 = pos.neighbours('8', 3)
    expect(n6.length).toEqual(8)
    expectXY(n6[0], 1, -2)
    expectXY(n6[1], 4, -2)
    expectXY(n6[2], 4, 1)
    expectXY(n6[3], 4, 4)
    expectXY(n6[4], 1, 4)
    expectXY(n6[5], -2, 4)
    expectXY(n6[6], -2, 1)
    expectXY(n6[7], -2, -2)
  })

  it('toString', () => {
    const pos1 = p(123, 456)
    const pos2 = p(-123, 456)
    const pos3 = p(123, -456)
    const pos4 = p(-123, -456)
    expect(pos1.toString()).toEqual('123,456')
    expect(pos2.toString()).toEqual('-123,456')
    expect(pos3.toString()).toEqual('123,-456')
    expect(pos4.toString()).toEqual('-123,-456')
  })
})
